{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MkDocs\n\u00b6\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nFor extended info how to use use: \nExamples\n\n\nCommands\n\u00b6\n\n\n\n\n\n\n\n\nFirst Header\n\n\nSecond Header\n\n\nThird Header\n\n\n\n\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis \nonly\n the docs for the DATA. The Docs\nSomething\n\n\n\n\n1\n2\n3\n4\n5\nFenced code blocks are like Standard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.\n\n\n\n\n\n\n1\n2\n#include\n \n<iostream>\n\n\nint\n \nunassigned\n \n=\n \n0\n;\n\n\n\n\n\n\n\n1\n2\nimport\n \nthis\n\n\nprint\n(\n\"Please document syntax highlighting in mkdocs\"\n)\n\n\n\n\n\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\u00b6\n\n\n1\n2\n3\n4\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\n\n\n\nHere is some \nincorrect\n Markdown.  I am adding this\n here\n.  Here is some more \ntext\n that I am removing\ntext.  And here is even more \ntext that I \n am \nadding.\n\u00a0\n  \nParagraph was deleted and replaced with some spaces.\n  \n\n\n\u00a0\n\n\nSpaces were removed and a paragraph was added.\n\n\nAnd here is a comment on \nsome\n text\nThis works quite well. I just wanted to comment on it.\n. Substitutions \nis\nare\n great!\n\n\nGeneral block handling.\n\n\n\n\n\n\ntest remove\n\n\ntest remove\n\n\ntest remove\n\n\ntest remove\n\n\n\n\n\n\ntest remove\n\n\n\n\n\n\n\n\n\n\ntest add\n\n\ntest add\n\n\ntest add\n\n\ntest add\n\n\n\n\n\n\ntest add",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-mkdocs",
            "text": "For full documentation visit  mkdocs.org .  For extended info how to use use:  Examples",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#commands",
            "text": "First Header  Second Header  Third Header      Content Cell  Content Cell  Content Cell    Content Cell  Content Cell  Content Cell      Note  This  only  the docs for the DATA. The Docs\nSomething   1\n2\n3\n4\n5 Fenced code blocks are like Standard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.   1\n2 #include   <iostream>  int   unassigned   =   0 ;    1\n2 import   this  print ( \"Please document syntax highlighting in mkdocs\" )     mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/#project-layout",
            "text": "1\n2\n3\n4 mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.   Here is some  incorrect  Markdown.  I am adding this  here .  Here is some more  text\n that I am removing text.  And here is even more  text that I \n am  adding. \u00a0    Paragraph was deleted and replaced with some spaces.     \u00a0  Spaces were removed and a paragraph was added.  And here is a comment on  some\n text This works quite well. I just wanted to comment on it. . Substitutions  is are  great!  General block handling.    test remove  test remove  test remove  test remove    test remove      test add  test add  test add  test add    test add",
            "title": "Project layout"
        },
        {
            "location": "/module/create/",
            "text": "How to create module\n\u00b6\n\n\nPreparing\n\u00b6\n\n\nFirst of all you need to create a file with \n.sp\n extension, full documentation how to write plugins can be found on \nSourceMod wiki\n\n\n\n\nNote\n\n\nFor module creation all you need is \na library of shop\n and all dependence files of it\n\n\n\n\n\n\nVery important\n\n\nThat you know \nhow to write basic plugins\n before you try to write \nmodule\n for \nShop Core\n\n\n\n\nThis is include file, that contains reference to another libs in our shop, just link it if you want to use shop natives.\n\n1\n#include\n \n<shop>\n\n\n\n\n\n\nBasic understand of the item types in shop.\nLets try to look into \nshop.inc\n file, what we see here.\n\n1\n2\n3\n4\n5\n6\n7\nenum\n \nItemType\n\n\n{\n\n\t\nItem_None\n \n=\n \n0\n,\n\t\t\n/* < Can not be used */\n\n\t\nItem_Finite\n \n=\n \n1\n,\n\t\n/* < Can be used like a medkit */\n\n\t\nItem_Togglable\n \n=\n \n2\n,\n\t\n/* < Can be switched on or off */\n\n\t\nItem_BuyOnly\n \n=\n \n3\n\t\n/* < Only for buy */\n\n\n}\n\n\n\n\n\nThat means, that item can be registered as one of the following types.\n\n\n\n\nNote\n\n\nItem cannot exist without category\n\n\n\n\nSteps to register item:\n\u00b6\n\n\nAdd check if shop is running to \nOnPluginStart\n and ready to register new categories/items\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\npublic void OnPluginStart()\n{\n\t/* ... Here some code before ... */\n\tif (Shop_IsStarted()) Shop_Started(); // to be sure, that Shop is ready to register\n}\n\npublic void Shop_Started()\n{\n\t// Here we will register items\n\t// Shop_RegisterCategory, Shop_StartItem, ... natives\n}\n\npublic void OnPluginEnd()\n{\n\t/* ... Here some code before ... */\n\tShop_UnregisterMe(); // To mark module as ready for unload himself from shop core. Because there are no garbage collector like in Java.\n}\n\n\n\n\n\n\nRegister a category via \nShop_RegisterCategory\n native.\n\u00b6\n\n\nTell our shop core, that we trying to register new item to category.\n\u00b6\n\n\n\n\nUse \nShop_StartItem\n native. Native return \ntrue\n if item can be registered, and false if that item is already registered and we stucked at names conflict.\n\n\n\n\nNext step is adding information for item via \nShop_SetInfo\n native. Let's look at this in more detail.\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n/**\n\n\n *\tSets the item information\n\n\n *\t-\n\n\n *\t@param name\t\t\t\tDefault display name\n\n\n *\t@param description\t\t\tDefault description\n\n\n *\t@param price\t\t\t\tItem price. Can not be lower than sell_price\n\n\n *\t@param sell_price\t\t\tItem sell price. 0 to make item free and -1 to make it unsaleable. Can not be higher than price\n\n\n *\t@param type\t\t\t\tItem type. See ItemType enum\n\n\n *\t@param value\t\t\t\tSets count if the item type is finite and sets duration if the item is togglable or non-togglable\n\n\n *\t@param gold_price\t\t\tItem price. Can be -1 to make in unbuyable for gold\n\n\n *\t@param gold_sell_price\t\t\tItem sell price. 0 to make item free and -1 to make it unsaleable. Can not be higher than price\n\n\n *\t-\n\n\n *\t@noreturn\n\n\n*/\n\n\nnative\n \nvoid\n \nShop_SetInfo\n(\nconst\n \nchar\n[]\n \nname\n,\n \nconst\n \nchar\n[]\n \ndescription\n,\n \nint\n \nprice\n,\n \nint\n \nsell_price\n \n=\n \n-\n1\n,\n \nItemType\n \ntype\n,\n \nint\n \nvalue\n \n=\n \n1\n,\n \nint\n \ngold_price\n \n=\n \n-\n1\n,\n \nint\n \ngold_sell_price\n \n=\n \n-\n1\n);\n\n\n\n\n\n\n\n\n\nExample item with name \nItem name\n, description \nItem description\n, price \n1000\n credits, sell price \n500\n credits, with finite number of this item, in equivalent of \n1\n per purchase, unbuyable by gold (because of \n-1\n), and unsaleable by gold (because \n-1\n)\n\n1\nShop_SetInfo\n(\n\"Item name\"\n,\n \n\"Item description\"\n,\n \n1000\n,\n \n500\n,\n \nItem_Finite\n,\n \n1\n,\n \n-\n1\n,\n \n-\n1\n);\n\n\n\n\n\n\nExample item with same name and description, but now buyable by \n200\n credits and \n10\n gold and \nunsaleable\n\n\n1\nShop_SetInfo\n(\n\"Item name\"\n,\n \n\"Item description\"\n,\n \n200\n,\n \n-\n1\n,\n \nItem_Finite\n,\n \n1\n,\n \n10\n,\n \n-\n1\n);\n\n\n\n\n\n\nExample item with same name and description, but type is Toggleble with \nduration of 1 week\n (in minutes is 86400), buy price is \n500\n credits and sell price is \n2 gold\n\n\n1\nShop_SetInfo\n(\n\"Item name\"\n,\n \n\"Item description\"\n,\n \n500\n,\n \n-\n1\n,\n \nItem_Toggleble\n,\n \n86400\n,\n \n-\n1\n,\n \n2\n);\n\n\n\n\n\n\n\n\nTime to add callbacks for our module. (\nShop_SetCallbacks\n)\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n/**\n\n\n *\tSets the item callbacks\n\n\n *\t-\n\n\n *\t@param register\t\t\t\tCallback called when the item is registered\n\n\n *\t@param use_toggle\t\t\tCallback called when the item is being used\n\n\n *\t@param should\t\t\t\tCallback called when the item is being displayed. Here you can stop displaying the item\n\n\n *\t@param display\t\t\t\tCallback called when the item is being displayed. Here you can change item display name\n\n\n *\t@param description\t\t\tCallback called when the item description is being displayed. Here you can change item description\n\n\n *\t@param preview\t\t\t\tCallback called when the item is previewing\n\n\n *\t@param buy\t\t\t\tCallback called when the item is being bought\n\n\n *\t@param sell\t\t\t\tCallback called when the item is being sold\n\n\n *\t@param elapse\t\t\t\tCallback called when the item is elapsed\n\n\n *\t-\n\n\n *\t@noreturn\n\n\n*/\n\n\nnative\n \nvoid\n \nShop_SetCallbacks\n(\nItemRegister\n \nregister\n=\nINVALID_FUNCTION\n,\n\n\t\nItemUseToggleCallback\n \nuse_toggle\n=\nINVALID_FUNCTION\n,\n \n\t\nItemShouldDisplayCallback\n \nshould\n=\nINVALID_FUNCTION\n,\n \n\t\nItemDisplayCallback\n \ndisplay\n=\nINVALID_FUNCTION\n,\n \n\t\nItemDescriptionCallback\n \ndescription\n=\nINVALID_FUNCTION\n,\n \n\t\nItemCommon\n \npreview\n=\nINVALID_FUNCTION\n,\n\n\t\nItemBuyCallback\n \nbuy\n=\nINVALID_FUNCTION\n,\n\n\t\nItemSellCallback\n \nsell\n=\nINVALID_FUNCTION\n,\n\n\t\nItemCommon\n \nelapse\n=\nINVALID_FUNCTION\n);\n\n\n\n\n\n\n\n\n\nImportant\n\n\nTo skip callbacks, that you don't want to use just put \n_\n on that position\nShop_SetCallbacks(_, OnEquipItem);\n\n\n\n\n\n\nFirst callback (\nItemRegister\n) we can ignore, but it useful, when you need to get item id and save it anywhere in your script.\n\n\nSecond callback (\nItemUseToggleCallback\n) we must use to process event when client is clicking on menu \nitem to use\n it.\n\n\nAccording to the documentation, there are 2 variants of that callback handling.\n\n1\n2\n3\n4\n5\ntypeset ItemUseToggleCallback\n{\n\tfunction ShopAction (int client, CategoryId category_id, const char[] category, ItemId item_id, const char[] item); // For all items\n\tfunction ShopAction (int client, CategoryId category_id, const char[] category, ItemId item_id, const char[] item, bool isOn, bool elapsed); // Only for togglable items\n}\n\n\n\n\nShopAction can return those states:\n\n1\n2\n3\n4\n5\n6\nenum\n \nShopAction\n\n\n{\n\n\t\nShop_Raw\n \n=\n \n0\n,\n \n// do nothing\n\n\t\nShop_UseOn\n \n=\n \n1\n,\n \n// pass to process click\n\n\t\nShop_UseOff\n \n=\n \n2\n \n// pass to process click, but if Item_Togglable, it turns off item and it Toggle status\n\n\n}\n\n\n\n\n\n\n\n\nCallback named \nOnEquipItem\n must be declared like this.\n\u00b6\n\n\nThis is example if the item is \nNOT\n togglable\n\n1\n2\n3\n4\n5\npublic\n \nShopAction\n \n(\nint\n \nclient\n,\n \nCategoryId\n \ncategory_id\n,\n \nconst\n \nchar\n[]\n \ncategory\n,\n \nItemId\n \nitem_id\n,\n \nconst\n \nchar\n[]\n \nitem\n)\n\n\n{\n\n\t\n// Do some stuff here with client\n\n\t\nreturn\n \nShop_UseOn\n;\n \n// Mark item as toggled on (or used if finite)\n\n\n}\n\n\n\n\n\n\n\n\n\n\nYou can add \nShop_SetLuckChance\n to setup luck chance for item\n\n\n\n\n\n\nYou can add \nShop_SetHide\n to setup is item hidden from \nBuy Menu\n or not.\n\n\n\n\n\n\nYou can provide extra information about item.\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n/**\n\n\n *\tSets item custom info\n\n\n *\t-\n\n\n *\t@param info\t\t\tName of the key\n\n\n *\t@param value\t\t\tValue to set\n\n\n *\t-\n\n\n *\t@noreturn\n\n\n*/\n\n\nnative\n \nvoid\n \nShop_SetCustomInfo\n(\nconst\n \nchar\n[]\n \ninfo\n,\n \nint\n \nvalue\n);\n\n\n\n/**\n\n\n *\tSets item custom info\n\n\n *\t-\n\n\n *\t@param info\t\t\tName of the key\n\n\n *\t@param value\t\t\tValue to set\n\n\n *\t-\n\n\n *\t@noreturn\n\n\n*/\n\n\nnative\n \nvoid\n \nShop_SetCustomInfoFloat\n(\nconst\n \nchar\n[]\n \ninfo\n,\n \nfloat\n \nvalue\n);\n\n\n\n/**\n\n\n *\tSets item custom info\n\n\n *\t-\n\n\n *\t@param info\t\t\tName of the key\n\n\n *\t@param value\t\t\tValue to set\n\n\n *\t-\n\n\n *\t@noreturn\n\n\n*/\n\n\nnative\n \nvoid\n \nShop_SetCustomInfoString\n(\nconst\n \nchar\n[]\n \ninfo\n,\n \nchar\n[]\n \nvalue\n);\n\n\n\n\n\n\n\n\n\nNote\n\n\nYou must always specify \nShop_EndItem()\n to mark item as ready to being registered by \ncore\n.\n\n\n\n\n\n\nInfo\n\n\nMore information will be added later",
            "title": "Module Creation"
        },
        {
            "location": "/module/create/#how-to-create-module",
            "text": "",
            "title": "How to create module"
        },
        {
            "location": "/module/create/#preparing",
            "text": "First of all you need to create a file with  .sp  extension, full documentation how to write plugins can be found on  SourceMod wiki   Note  For module creation all you need is  a library of shop  and all dependence files of it    Very important  That you know  how to write basic plugins  before you try to write  module  for  Shop Core   This is include file, that contains reference to another libs in our shop, just link it if you want to use shop natives. 1 #include   <shop>    Basic understand of the item types in shop.\nLets try to look into  shop.inc  file, what we see here. 1\n2\n3\n4\n5\n6\n7 enum   ItemType  { \n\t Item_None   =   0 , \t\t /* < Can not be used */ \n\t Item_Finite   =   1 , \t /* < Can be used like a medkit */ \n\t Item_Togglable   =   2 , \t /* < Can be switched on or off */ \n\t Item_BuyOnly   =   3 \t /* < Only for buy */  }   \nThat means, that item can be registered as one of the following types.   Note  Item cannot exist without category",
            "title": "Preparing"
        },
        {
            "location": "/module/create/#steps-to-register-item",
            "text": "",
            "title": "Steps to register item:"
        },
        {
            "location": "/module/create/#add-check-if-shop-is-running-to-onpluginstart-and-ready-to-register-new-categoriesitems",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 public void OnPluginStart()\n{\n\t/* ... Here some code before ... */\n\tif (Shop_IsStarted()) Shop_Started(); // to be sure, that Shop is ready to register\n}\n\npublic void Shop_Started()\n{\n\t// Here we will register items\n\t// Shop_RegisterCategory, Shop_StartItem, ... natives\n}\n\npublic void OnPluginEnd()\n{\n\t/* ... Here some code before ... */\n\tShop_UnregisterMe(); // To mark module as ready for unload himself from shop core. Because there are no garbage collector like in Java.\n}",
            "title": "Add check if shop is running to OnPluginStart and ready to register new categories/items"
        },
        {
            "location": "/module/create/#register-a-category-via-shop_registercategory-native",
            "text": "",
            "title": "Register a category via Shop_RegisterCategory native."
        },
        {
            "location": "/module/create/#tell-our-shop-core-that-we-trying-to-register-new-item-to-category",
            "text": "Use  Shop_StartItem  native. Native return  true  if item can be registered, and false if that item is already registered and we stucked at names conflict.",
            "title": "Tell our shop core, that we trying to register new item to category."
        },
        {
            "location": "/module/create/#next-step-is-adding-information-for-item-via-shop_setinfo-native-lets-look-at-this-in-more-detail",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 /**   *\tSets the item information   *\t-   *\t@param name\t\t\t\tDefault display name   *\t@param description\t\t\tDefault description   *\t@param price\t\t\t\tItem price. Can not be lower than sell_price   *\t@param sell_price\t\t\tItem sell price. 0 to make item free and -1 to make it unsaleable. Can not be higher than price   *\t@param type\t\t\t\tItem type. See ItemType enum   *\t@param value\t\t\t\tSets count if the item type is finite and sets duration if the item is togglable or non-togglable   *\t@param gold_price\t\t\tItem price. Can be -1 to make in unbuyable for gold   *\t@param gold_sell_price\t\t\tItem sell price. 0 to make item free and -1 to make it unsaleable. Can not be higher than price   *\t-   *\t@noreturn  */  native   void   Shop_SetInfo ( const   char []   name ,   const   char []   description ,   int   price ,   int   sell_price   =   - 1 ,   ItemType   type ,   int   value   =   1 ,   int   gold_price   =   - 1 ,   int   gold_sell_price   =   - 1 );     Example item with name  Item name , description  Item description , price  1000  credits, sell price  500  credits, with finite number of this item, in equivalent of  1  per purchase, unbuyable by gold (because of  -1 ), and unsaleable by gold (because  -1 ) 1 Shop_SetInfo ( \"Item name\" ,   \"Item description\" ,   1000 ,   500 ,   Item_Finite ,   1 ,   - 1 ,   - 1 );    Example item with same name and description, but now buyable by  200  credits and  10  gold and  unsaleable  1 Shop_SetInfo ( \"Item name\" ,   \"Item description\" ,   200 ,   - 1 ,   Item_Finite ,   1 ,   10 ,   - 1 );    Example item with same name and description, but type is Toggleble with  duration of 1 week  (in minutes is 86400), buy price is  500  credits and sell price is  2 gold  1 Shop_SetInfo ( \"Item name\" ,   \"Item description\" ,   500 ,   - 1 ,   Item_Toggleble ,   86400 ,   - 1 ,   2 );",
            "title": "Next step is adding information for item via Shop_SetInfo native. Let's look at this in more detail."
        },
        {
            "location": "/module/create/#time-to-add-callbacks-for-our-module-shop_setcallbacks",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 /**   *\tSets the item callbacks   *\t-   *\t@param register\t\t\t\tCallback called when the item is registered   *\t@param use_toggle\t\t\tCallback called when the item is being used   *\t@param should\t\t\t\tCallback called when the item is being displayed. Here you can stop displaying the item   *\t@param display\t\t\t\tCallback called when the item is being displayed. Here you can change item display name   *\t@param description\t\t\tCallback called when the item description is being displayed. Here you can change item description   *\t@param preview\t\t\t\tCallback called when the item is previewing   *\t@param buy\t\t\t\tCallback called when the item is being bought   *\t@param sell\t\t\t\tCallback called when the item is being sold   *\t@param elapse\t\t\t\tCallback called when the item is elapsed   *\t-   *\t@noreturn  */  native   void   Shop_SetCallbacks ( ItemRegister   register = INVALID_FUNCTION , \n\t ItemUseToggleCallback   use_toggle = INVALID_FUNCTION ,  \n\t ItemShouldDisplayCallback   should = INVALID_FUNCTION ,  \n\t ItemDisplayCallback   display = INVALID_FUNCTION ,  \n\t ItemDescriptionCallback   description = INVALID_FUNCTION ,  \n\t ItemCommon   preview = INVALID_FUNCTION , \n\t ItemBuyCallback   buy = INVALID_FUNCTION , \n\t ItemSellCallback   sell = INVALID_FUNCTION , \n\t ItemCommon   elapse = INVALID_FUNCTION );     Important  To skip callbacks, that you don't want to use just put  _  on that position\nShop_SetCallbacks(_, OnEquipItem);    First callback ( ItemRegister ) we can ignore, but it useful, when you need to get item id and save it anywhere in your script.  Second callback ( ItemUseToggleCallback ) we must use to process event when client is clicking on menu  item to use  it.  According to the documentation, there are 2 variants of that callback handling. 1\n2\n3\n4\n5 typeset ItemUseToggleCallback\n{\n\tfunction ShopAction (int client, CategoryId category_id, const char[] category, ItemId item_id, const char[] item); // For all items\n\tfunction ShopAction (int client, CategoryId category_id, const char[] category, ItemId item_id, const char[] item, bool isOn, bool elapsed); // Only for togglable items\n}  \nShopAction can return those states: 1\n2\n3\n4\n5\n6 enum   ShopAction  { \n\t Shop_Raw   =   0 ,   // do nothing \n\t Shop_UseOn   =   1 ,   // pass to process click \n\t Shop_UseOff   =   2   // pass to process click, but if Item_Togglable, it turns off item and it Toggle status  }",
            "title": "Time to add callbacks for our module. (Shop_SetCallbacks)"
        },
        {
            "location": "/module/create/#callback-named-onequipitem-must-be-declared-like-this",
            "text": "This is example if the item is  NOT  togglable 1\n2\n3\n4\n5 public   ShopAction   ( int   client ,   CategoryId   category_id ,   const   char []   category ,   ItemId   item_id ,   const   char []   item )  { \n\t // Do some stuff here with client \n\t return   Shop_UseOn ;   // Mark item as toggled on (or used if finite)  }      You can add  Shop_SetLuckChance  to setup luck chance for item    You can add  Shop_SetHide  to setup is item hidden from  Buy Menu  or not.    You can provide extra information about item.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 /**   *\tSets item custom info   *\t-   *\t@param info\t\t\tName of the key   *\t@param value\t\t\tValue to set   *\t-   *\t@noreturn  */  native   void   Shop_SetCustomInfo ( const   char []   info ,   int   value );  /**   *\tSets item custom info   *\t-   *\t@param info\t\t\tName of the key   *\t@param value\t\t\tValue to set   *\t-   *\t@noreturn  */  native   void   Shop_SetCustomInfoFloat ( const   char []   info ,   float   value );  /**   *\tSets item custom info   *\t-   *\t@param info\t\t\tName of the key   *\t@param value\t\t\tValue to set   *\t-   *\t@noreturn  */  native   void   Shop_SetCustomInfoString ( const   char []   info ,   char []   value );     Note  You must always specify  Shop_EndItem()  to mark item as ready to being registered by  core .    Info  More information will be added later",
            "title": "Callback named OnEquipItem must be declared like this."
        }
    ]
}